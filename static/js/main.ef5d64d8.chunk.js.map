{"version":3,"sources":["taskboard/TaskboardTypes.ts","shared/SharedUtils.ts","taskboard/TaskboardItemFormModal.tsx","shared/BaseTooltip.tsx","taskboard/TaskboardItemCard.tsx","taskboard/TaskboardCol.tsx","taskboard/Taskboard.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskboardItemStatus","colors","primary","geekblue","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","Form","useForm","form","inputRef","useRef","useEffect","current","focus","resetFields","title","destroyOnClose","forceRender","submit","autoComplete","layout","onFinish","values","Item","name","label","rules","required","message","max","ref","autoFocus","TextArea","rows","BaseTooltip","props","mouseEnterDelay","StyledCard","styled","Card","$isDragging","TaskboardItemCardTitle","Typography","Title","DeleteMenuItem","Menu","red","TaskboardItemCard","item","status","isDragging","onEdit","onDelete","size","overlay","level","ellipsis","extra","icon","EditOutlined","onClick","DeleteOutlined","Modal","confirm","content","itemToDelete","trigger","MoreOutlined","description","Paragraph","type","TaskboardColRoot","DroppableRoot","div","isDraggingOver","TaskboardCol","items","onClickAdd","length","droppableId","provided","snapshot","innerRef","droppableProps","map","index","draggableId","id","draggableProps","dragHandleProps","placeholder","TaskboardRoot","TaskboardContent","defaultItems","TO_DO","IN_PROGRESS","DONE","localStorageKey","Taskboard","useState","goTrySync","JSON","parse","localStorage","getItem","data","itemsByStatus","setItemsByStatus","setItem","stringify","isModalVisible","setIsModalVisible","itemToEdit","setItemToEdit","openTaskItemModal","handleDelete","produce","draft","filter","useMemo","onDragEnd","source","destination","splice","removed","Object","undefined","draftItem","flatMap","find","push","Date","now","toString","StyledLayout","Layout","StyledHeader","Header","StyledContent","Content","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef5d64d8.chunk.js","sourcesContent":["export interface TaskboardItem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nexport enum TaskboardItemStatus {\r\n  TO_DO = \"To Do\",\r\n  IN_PROGRESS = \"In Progress\",\r\n  DONE = \"Done\",\r\n}\r\n","import { geekblue } from \"@ant-design/colors\";\r\n\r\nexport const colors = {\r\n  primary: geekblue,\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\nimport { Modal, Form, ModalProps, Input } from \"antd\";\r\nimport { TaskboardItem } from \"./TaskboardTypes\";\r\n\r\nexport type TaskboardItemFormValues = Pick<\r\n  TaskboardItem,\r\n  \"title\" | \"description\"\r\n>;\r\n\r\ntype TaskboardItemFormModalProps = Pick<ModalProps, \"visible\"> & {\r\n  initialValues: TaskboardItemFormValues;\r\n  onCancel: VoidFunction;\r\n  onOk: (values: TaskboardItemFormValues) => void;\r\n};\r\n\r\nfunction TaskboardItemFormModal({\r\n  visible,\r\n  initialValues,\r\n  onCancel,\r\n  onOk,\r\n}: TaskboardItemFormModalProps) {\r\n  const [form] = Form.useForm<TaskboardItemFormValues>();\r\n\r\n  const inputRef = useRef<Input>(null);\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      // Focus on the first input when the modal is opened\r\n      inputRef.current?.focus();\r\n      form.resetFields();\r\n    }\r\n  }, [form, visible]);\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Add Item\"\r\n      visible={visible}\r\n      destroyOnClose\r\n      // To make dynamically changing initialValues work with Form\r\n      forceRender\r\n      onCancel={onCancel}\r\n      onOk={() => form.submit()}\r\n    >\r\n      <Form\r\n        autoComplete=\"off\"\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={initialValues}\r\n        onFinish={(values) => {\r\n          onOk(values);\r\n          form.resetFields();\r\n          onCancel();\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          label=\"Title\"\r\n          rules={[\r\n            { required: true, message: \"'Title' is required\" },\r\n            {\r\n              max: 100,\r\n              message: \"'Title' can not be longer than 100 characters\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input ref={inputRef} autoFocus />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          rules={[\r\n            { required: true, message: \"'Description' is required\" },\r\n            {\r\n              max: 400,\r\n              message: \"'Description' can not be longer than 400 characters\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input.TextArea rows={4} />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default TaskboardItemFormModal;\r\n","import { Tooltip, TooltipProps } from \"antd\";\r\n\r\ntype BaseTooltipProps = TooltipProps;\r\n\r\nfunction BaseTooltip(props: BaseTooltipProps) {\r\n  return <Tooltip mouseEnterDelay={1.5} {...props} />;\r\n}\r\n\r\nexport default BaseTooltip;\r\n","import React from \"react\";\r\nimport { Button, Card, Modal, Typography, Dropdown, Menu } from \"antd\";\r\nimport { TaskboardItem, TaskboardItemStatus } from \"./TaskboardTypes\";\r\nimport { DeleteOutlined, EditOutlined, MoreOutlined } from \"@ant-design/icons\";\r\nimport { red } from \"@ant-design/colors\";\r\nimport styled from \"styled-components\";\r\nimport BaseTooltip from \"../shared/BaseTooltip\";\r\n\r\ninterface StyledCardProps {\r\n  $isDragging: boolean;\r\n}\r\n\r\nconst StyledCard = styled(Card)<StyledCardProps>`\r\n  margin: 0.5rem;\r\n  padding: 0.5rem;\r\n  background-color: ${({ $isDragging }) => ($isDragging ? \"#fafafa\" : \"#fff\")};\r\n`;\r\n\r\nconst TaskboardItemCardTitle = styled(Typography.Title)`\r\n  white-space: pre-wrap;\r\n  // To make ellipsis of the title visible.\r\n  // Without this margin, it can be go behind the \"extra\" component.\r\n  // So, we give it a little space.\r\n  margin-right: 0.25rem;\r\n`;\r\n\r\nconst DeleteMenuItem = styled(Menu.Item)`\r\n  color: ${red.primary};\r\n`;\r\n\r\nexport interface TaskboardItemCardProps {\r\n  item: TaskboardItem;\r\n  isDragging: boolean;\r\n  status: TaskboardItemStatus;\r\n  onEdit: (itemToEdit: TaskboardItem) => void;\r\n  onDelete: (args: {\r\n    status: TaskboardItemStatus;\r\n    itemToDelete: TaskboardItem;\r\n  }) => void;\r\n}\r\n\r\nfunction TaskboardItemCard({\r\n  item,\r\n  status,\r\n  isDragging,\r\n  onEdit,\r\n  onDelete,\r\n}: TaskboardItemCardProps) {\r\n  return (\r\n    <StyledCard\r\n      $isDragging={isDragging}\r\n      size=\"small\"\r\n      title={\r\n        <BaseTooltip overlay={item.title}>\r\n          {/* styled(Typography.Title) throws an error in console about \r\n          forwarding ref in function components.\r\n          Because Typography.Title doesn't accept a ref.\r\n          So, we just placed a span tag here. */}\r\n          <span>\r\n            <TaskboardItemCardTitle level={5} ellipsis={{ rows: 2 }}>\r\n              {item.title}\r\n            </TaskboardItemCardTitle>\r\n          </span>\r\n        </BaseTooltip>\r\n      }\r\n      extra={\r\n        <Dropdown\r\n          overlay={\r\n            <Menu>\r\n              <Menu.Item icon={<EditOutlined />} onClick={() => onEdit(item)}>\r\n                Edit\r\n              </Menu.Item>\r\n              <DeleteMenuItem\r\n                icon={<DeleteOutlined />}\r\n                onClick={() =>\r\n                  Modal.confirm({\r\n                    title: \"Delete?\",\r\n                    content: `Are you sure to delete \"${item.title}\"?`,\r\n                    onOk: () =>\r\n                      onDelete({\r\n                        status,\r\n                        itemToDelete: item,\r\n                      }),\r\n                  })\r\n                }\r\n              >\r\n                Delete\r\n              </DeleteMenuItem>\r\n            </Menu>\r\n          }\r\n          trigger={[\"click\"]}\r\n        >\r\n          <Button size=\"small\" icon={<MoreOutlined />} />\r\n        </Dropdown>\r\n      }\r\n    >\r\n      <BaseTooltip overlay={item.description}>\r\n        <Typography.Paragraph type=\"secondary\" ellipsis={{ rows: 2 }}>\r\n          {item.description}\r\n        </Typography.Paragraph>\r\n      </BaseTooltip>\r\n    </StyledCard>\r\n  );\r\n}\r\n\r\nexport default TaskboardItemCard;\r\n","import { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport { Button, Card } from \"antd\";\r\nimport { TaskboardItem, TaskboardItemStatus } from \"./TaskboardTypes\";\r\nimport TaskboardItemCard, { TaskboardItemCardProps } from \"./TaskboardItemCard\";\r\nimport { colors } from \"../shared/SharedUtils\";\r\n\r\nconst TaskboardColRoot = styled(Card)`\r\n  user-select: none;\r\n  flex: 1;\r\n  margin: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // To force each flex item to have equal width\r\n  // even if they have long texts with no spaces etc.\r\n  min-width: 0;\r\n  > .ant-card-body {\r\n    overflow: hidden;\r\n    height: 100%;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\ninterface DroppableRootProps {\r\n  isDraggingOver: boolean;\r\n}\r\n\r\nconst DroppableRoot = styled.div<DroppableRootProps>`\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  background-color: ${({ isDraggingOver }) =>\r\n    isDraggingOver ? colors.primary[2] : colors.primary[1]};\r\n`;\r\n\r\nexport type TaskboardColProps = Pick<\r\n  TaskboardItemCardProps,\r\n  \"onEdit\" | \"onDelete\"\r\n> & {\r\n  items: TaskboardItem[];\r\n  status: TaskboardItemStatus;\r\n  onClickAdd?: VoidFunction;\r\n};\r\n\r\nfunction TaskboardCol({\r\n  items,\r\n  status,\r\n  onClickAdd,\r\n  onEdit,\r\n  onDelete,\r\n}: TaskboardColProps) {\r\n  return (\r\n    <TaskboardColRoot\r\n      title={`${status} (${items.length})`}\r\n      extra={\r\n        onClickAdd && (\r\n          <Button type=\"primary\" onClick={onClickAdd}>\r\n            Add\r\n          </Button>\r\n        )\r\n      }\r\n    >\r\n      <Droppable droppableId={status}>\r\n        {(provided, snapshot) => (\r\n          <DroppableRoot\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}\r\n            isDraggingOver={snapshot.isDraggingOver}\r\n          >\r\n            {items.map((item, index) => {\r\n              return (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      key={item.id}\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      <TaskboardItemCard\r\n                        item={item}\r\n                        status={status}\r\n                        isDragging={snapshot.isDragging}\r\n                        onEdit={onEdit}\r\n                        onDelete={onDelete}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              );\r\n            })}\r\n            {provided.placeholder}\r\n          </DroppableRoot>\r\n        )}\r\n      </Droppable>\r\n    </TaskboardColRoot>\r\n  );\r\n}\r\n\r\nexport default TaskboardCol;\r\n","import { DragDropContext, DragDropContextProps } from \"react-beautiful-dnd\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport produce from \"immer\";\r\nimport styled from \"styled-components\";\r\nimport { goTrySync } from \"go-try\";\r\nimport { TaskboardItem, TaskboardItemStatus } from \"./TaskboardTypes\";\r\nimport TaskboardItemFormModal, {\r\n  TaskboardItemFormValues,\r\n} from \"./TaskboardItemFormModal\";\r\nimport TaskboardCol, { TaskboardColProps } from \"./TaskboardCol\";\r\n\r\nconst generateId = () => Date.now().toString();\r\n\r\nconst TaskboardRoot = styled.div`\r\n  min-height: 0;\r\n  height: 100%;\r\n  min-width: 800px;\r\n  max-width: 1400px;\r\n  margin: auto;\r\n`;\r\n\r\nconst TaskboardContent = styled.div`\r\n  height: 100%;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst defaultItems = {\r\n  [TaskboardItemStatus.TO_DO]: [],\r\n  [TaskboardItemStatus.IN_PROGRESS]: [],\r\n  [TaskboardItemStatus.DONE]: [],\r\n};\r\n\r\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\r\n\r\nconst localStorageKey = \"itemsByStatus\";\r\n\r\nfunction Taskboard() {\r\n  const [itemsByStatus, setItemsByStatus] = useState<TaskboardData>(\r\n    () =>\r\n      goTrySync<TaskboardData>(() =>\r\n        JSON.parse(localStorage.getItem(localStorageKey) ?? \"\")\r\n      ).data ?? defaultItems\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(itemsByStatus));\r\n  }, [itemsByStatus]);\r\n\r\n  const handleDragEnd: DragDropContextProps[\"onDragEnd\"] = ({\r\n    source,\r\n    destination,\r\n  }) => {\r\n    setItemsByStatus((current) =>\r\n      produce(current, (draft) => {\r\n        // dropped outside the list\r\n        if (!destination) {\r\n          return;\r\n        }\r\n        const [removed] = draft[\r\n          source.droppableId as TaskboardItemStatus\r\n        ].splice(source.index, 1);\r\n        draft[destination.droppableId as TaskboardItemStatus].splice(\r\n          destination.index,\r\n          0,\r\n          removed\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null);\r\n\r\n  const openTaskItemModal = (itemToEdit: TaskboardItem | null) => {\r\n    setItemToEdit(itemToEdit);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const closeTaskItemModal = () => {\r\n    setItemToEdit(null);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleDelete: TaskboardColProps[\"onDelete\"] = ({\r\n    status,\r\n    itemToDelete,\r\n  }) =>\r\n    setItemsByStatus((current) =>\r\n      produce(current, (draft) => {\r\n        draft[status] = draft[status].filter(\r\n          (item) => item.id !== itemToDelete.id\r\n        );\r\n      })\r\n    );\r\n\r\n  const initialValues = useMemo<TaskboardItemFormValues>(\r\n    () => ({\r\n      title: itemToEdit?.title ?? \"\",\r\n      description: itemToEdit?.description ?? \"\",\r\n    }),\r\n    [itemToEdit]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <TaskboardRoot>\r\n          <TaskboardContent>\r\n            {Object.values(TaskboardItemStatus).map((status) => (\r\n              <TaskboardCol\r\n                key={status}\r\n                status={status}\r\n                items={itemsByStatus[status]}\r\n                onClickAdd={\r\n                  status === TaskboardItemStatus.TO_DO\r\n                    ? () => openTaskItemModal(null)\r\n                    : undefined\r\n                }\r\n                onEdit={openTaskItemModal}\r\n                onDelete={handleDelete}\r\n              />\r\n            ))}\r\n          </TaskboardContent>\r\n        </TaskboardRoot>\r\n      </DragDropContext>\r\n      <TaskboardItemFormModal\r\n        visible={isModalVisible}\r\n        onCancel={closeTaskItemModal}\r\n        onOk={(values) => {\r\n          setItemsByStatus((current) =>\r\n            produce(current, (draft) => {\r\n              if (itemToEdit) {\r\n                const draftItem = Object.values(draft)\r\n                  .flatMap((items) => items)\r\n                  .find((item) => item.id === itemToEdit.id);\r\n                if (draftItem) {\r\n                  draftItem.title = values.title;\r\n                  draftItem.description = values.description;\r\n                }\r\n              } else {\r\n                // Adding new item as \"to do\"\r\n                draft[TaskboardItemStatus.TO_DO].push({\r\n                  ...values,\r\n                  id: generateId(),\r\n                });\r\n              }\r\n            })\r\n          );\r\n        }}\r\n        initialValues={initialValues}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Taskboard;\r\n","import { Typography } from \"antd\";\nimport Layout, { Content, Header } from \"antd/lib/layout/layout\";\nimport styled from \"styled-components\";\nimport { colors } from \"../shared/SharedUtils\";\nimport Taskboard from \"../taskboard/Taskboard\";\n\nconst StyledLayout = styled(Layout)`\n  /* We can't use \"height: 100vh; width: 100vw;\" here.\n  Otherwise, when there is a horizontal scrollbar etc, \n  because that we set a constant height, there will be a vertical one too.  */\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst StyledHeader = styled(Header)`\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n`;\n\nconst StyledContent = styled(Content)`\n  background-color: ${colors.primary[6]};\n`;\n\nfunction App() {\n  return (\n    <StyledLayout>\n      <StyledHeader>\n        <Typography.Title level={3} type=\"secondary\">\n          Drag & Drop Taskboard\n        </Typography.Title>\n      </StyledHeader>\n      <StyledContent>\n        <Taskboard />\n      </StyledContent>\n    </StyledLayout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}